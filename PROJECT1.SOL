// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

contract AccountCreation  {

    struct User  {
        uint age;
        string name;
        bool isAgeVerified;
    }

    mapping(address => User) private users;
    mapping(string => bool) private nameExists;

     // Function to check age using require statement
    function checkAge(uint _age) public  {
        require(_age > 18, "You must be older than 18 to create an account");
        users[msg.sender].age = _age;
        users[msg.sender].isAgeVerified = true;
    }

     // Function to create an account using revert statement
    function createAccount(string memory _name) public  {
        if (users[msg.sender].isAgeVerified == false) {
            revert("You are not legal to create an account");
        }
        require(nameExists[_name] == false, "Name is already taken");
        users[msg.sender].name = _name;
        nameExists[_name] = true;
    }

     // Function to verify that the user has checked their age using assert statement
    function verifyAgeCheck() public view returns (string memory) {
    if(users[msg.sender].isAgeVerified == true){
        return("Legal");
    } else{
        return("Not Legal");
    }
}

     // Function to get user details
    function getUser() public view returns (uint, string memory, bool) {
        User memory user = users[msg.sender];
        return (user.age, user.name, user.isAgeVerified);
    } 
}
